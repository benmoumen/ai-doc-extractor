services:
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: ai-doc-backend
    ports:
      - "8000:8000"
    environment:
      # API Keys - Set these in .env file
      - GROQ_API_KEY=${GROQ_API_KEY}
      - MISTRAL_API_KEY=${MISTRAL_API_KEY}
      - OPENAI_API_KEY=${OPENAI_API_KEY}
      - ANTHROPIC_API_KEY=${ANTHROPIC_API_KEY}
      # FastAPI settings
      - PYTHONUNBUFFERED=1
      - LOG_LEVEL=${LOG_LEVEL:-info}
    volumes:
      - ./backend/data:/app/data
      - ./backend/logs:/app/logs
    networks:
      - ai-doc-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  frontend:
    build:
      context: ./nextjs-app
      dockerfile: Dockerfile
    container_name: ai-doc-frontend
    ports:
      - "3000:3000"
    environment:
      - NODE_ENV=production
      - NEXT_PUBLIC_API_URL=http://backend:8000
      - NEXT_PUBLIC_BACKEND_URL=http://localhost:8000
    depends_on:
      - backend
    networks:
      - ai-doc-network
    restart: unless-stopped
    healthcheck:
      test:
        [
          "CMD",
          "node",
          "-e",
          "require('http').get('http://localhost:3000/api/health', (r) => {r.statusCode === 200 ? process.exit(0) : process.exit(1)})",
        ]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # Optional: Add database service if needed
  db:
    image: postgres:15-alpine
    container_name: ai-doc-db
    environment:
      - POSTGRES_USER=aidoc
      - POSTGRES_PASSWORD=${DB_PASSWORD:-changeme}
      - POSTGRES_DB=aidoc_db
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./backend/ai_schema_generation/storage:/docker-entrypoint-initdb.d:ro
    ports:
      - "5432:5432"
    networks:
      - ai-doc-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U \"$${POSTGRES_USER}\" -d \"$${POSTGRES_DB}\""]
      interval: 10s
      timeout: 5s
      retries: 5

  # Optional: Add Redis for caching
  redis:
    image: redis:7-alpine
    container_name: ai-doc-redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - ai-doc-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

networks:
  ai-doc-network:
    driver: bridge

volumes:
  postgres_data:
  redis_data:
